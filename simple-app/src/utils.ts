import * as ethers from "ethers";
import { SimpleApp, SimpleApp__factory } from "../typechain-types";
import * as fs from "fs";
import * as path from "path";
import { string, option } from "cmd-ts";

export type Option = ReturnType<typeof option>;

export function instance(description?: string | undefined): Option {
  return option({
    type: string,
    long: "instance",
    short: "i",
    defaultValue: () => "simple-app.instance",
    description: description || "simple-app instance file",
  });
}

export function circuitWasm(description?: string | undefined): Option {
  return option({
    type: string,
    long: "circuit-wasm",
    defaultValue: () => {
      return findCircuitFile("circuit_js/circuit.wasm");
    },
    description:
      description || "The .wasm file for simple-app generated by Circom",
  });
}

export function circuitZkey(description?: string | undefined): Option {
  return option({
    type: string,
    long: "circuit-zkey",
    defaultValue: () => {
      return findCircuitFile("circuit.zkey");
    },
    description: description || "The .zkey file generated by SnarkJS",
  });
}

export function saturnInstance(description?: string | undefined): Option {
  return option({
    type: string,
    long: "saturn-instance",
    defaultValue: () => `saturn.instance`,
    description: description || "The Saturn instance used by simple-app",
  });
}

export function proofOutputFile(description?: string | undefined): Option {
  return option({
    type: string,
    long: "proof-output",
    defaultValue: () => "generated_proofs.json",
    description: description || "Destination file for generated proof data",
  });
}

export function vkFile(description?: string | undefined): Option {
  return option({
    type: string,
    long: "vk-file",
    short: "v",
    defaultValue: () => findCircuitFile("saturn_verification_key.json"),
    description: description || "Simple-app's verifying key file",
  });
}

export type SimpleAppInstance = {
  /// Address of the simple-app contract
  simpleApp: string;
};

export function loadSimpleAppInstance(
  instance_file: string
): SimpleAppInstance {
  return JSON.parse(
    fs.readFileSync(instance_file, "ascii")
  ) as SimpleAppInstance;
}

export function simpleAppFromInstance(instance_file: string): SimpleApp {
  const instance = loadSimpleAppInstance(instance_file);
  return SimpleApp__factory.connect(instance.simpleApp);
}

// Generates a random non-negative solution to the equation a*b = c*d + e + f.
export function generateRandomProofInputs(): {
  a: bigint;
  b: bigint;
  c: bigint;
  d: bigint;
  e: bigint;
  f: bigint;
} {
  const c = BigInt(ethers.hexlify(ethers.randomBytes(4)));
  const d = BigInt(ethers.hexlify(ethers.randomBytes(4)));
  const a = c + 1n;
  const b = d + 1n;
  const e = c;
  const f = d + 1n;
  return { a, b, c, d, e, f };
}

// Attempt to find a file in the `circuits` directory
function findCircuitFile(filename: string): string {
  // Try the expected locations, based on this file being either in /src
  // or /dist/src directories in the package root.

  let f = path.normalize(path.join(__dirname, "..", "circuits", filename));
  if (!fs.existsSync(f)) {
    f = path.normalize(path.join(__dirname, "..", "..", "circuits", filename));
    if (!fs.existsSync(f)) {
      throw "unable to find " + filename + ".  Specify explicitly with flags.";
    }
  }
  return f;
}
